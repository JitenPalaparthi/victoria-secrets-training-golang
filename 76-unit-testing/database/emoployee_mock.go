// Code generated by MockGen. DO NOT EDIT.
// Source: employee.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIEmployee is a mock of IEmployee interface.
type MockIEmployee struct {
	ctrl     *gomock.Controller
	recorder *MockIEmployeeMockRecorder
}

// MockIEmployeeMockRecorder is the mock recorder for MockIEmployee.
type MockIEmployeeMockRecorder struct {
	mock *MockIEmployee
}

// NewMockIEmployee creates a new mock instance.
func NewMockIEmployee(ctrl *gomock.Controller) *MockIEmployee {
	mock := &MockIEmployee{ctrl: ctrl}
	mock.recorder = &MockIEmployeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmployee) EXPECT() *MockIEmployeeMockRecorder {
	return m.recorder
}

// InsertEmployee mocks base method.
func (m *MockIEmployee) InsertEmployee(emp *Employee) (*Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEmployee", emp)
	ret0, _ := ret[0].(*Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEmployee indicates an expected call of InsertEmployee.
func (mr *MockIEmployeeMockRecorder) InsertEmployee(emp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEmployee", reflect.TypeOf((*MockIEmployee)(nil).InsertEmployee), emp)
}
